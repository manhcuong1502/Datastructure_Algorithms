1
vector<int> updateArrayPerRange(vector<int>& nums, vector<vector<int>>& operations) {
    // STUDENT ANSWER
    int ll=operations.size();
    for(int i=0;i<ll;i++){
        int l1=operations[i][0];
        for(int j=l1;j<=operations[i][1];j++){
            nums[j]=nums[j]+operations[i][2];
        }
    }
    return nums;
}


2
bool consecutiveOnes(vector<int>& nums) {
    // STUDENT ANSWER
    
    int cao=nums.size();
    if(cao==0) return 1;
    int coo=0;
    while(nums[coo]!=1&&coo<cao){
        coo++;
    }
    while(nums[coo]==1&&coo<cao){
        coo++;
    }
    while(coo<cao){
        if(nums[coo]==1) return 0;
        coo++;
    }
    return 1;
}


3
int buyCar(int* nums, int length, int k) {
    int m=0;
    int cc=0;
    int nn[length];
    for(int i=0;i<length;i++){
        nn[i]=nums[i];
    }
    for(int i=0;i<length;i++){
        m=nn[i];
        for(int j=i+1;j<length;j++){
            if(m>nn[j]){
                cc=m;
                m=nn[j];
                nn[j]=cc;
            }
        }
        nn[i]=m;
    }

    
    cc=0;
    while(k>=0&&cc<length){
        k=k-nn[cc];
        cc++;
    }
    if (k<0) return cc-1;
    else return cc;

}


4
int longestSublist(vector<string>& words) {
    // STUDENT ANSWER
    int l=words.size();
    int m=1;
    int cc=1;
    if(l==0) return 0;
    else if(l==1) return 1;
    for(int i=1;i<l;i++){
        if(words[i][0]==words[i-1][0]){
            cc++;
        }
        else{
            if(m<cc) {m=cc;}
            cc=1;
        }
    }
    if(m<cc) {m=cc;}
    
    
    return m;
}


5
int equalSumIndex(vector<int>& nums) {
    // STUDENT ANSWER
    int le=nums.size();
    int l=nums[0];
    int r=0;
    for(int i=2;i<le;i++){
        r=r+nums[i];
    }
    if(le==0) return -1;
    else if(le==1) return 0;
    else if(l==r) return 1;
    for(int i=2;i<le-1;i++){
        l=l+nums[i-1];
        r=r-nums[i];
        if(l==r) return i; 
    }
    return -1;
}


7
int minimumAmplitude(vector<int>& nums, int k) {
   
    int a=nums.size();
    int ln=a-k,ht;
    int min=INT_MAX;
    int luot=0;
    for(int i=0;i<a;i++){
        int min1=INT_MAX,max1=INT_MIN;
        for(int j=0;j<ln;j++){
            if(luot+k<=a){
                if(j<luot){
                    ht=nums[j];
                }
                else ht=nums[j+k];
                    
            }
            else ht=nums[j+luot-ln];
            if(min1>ht) min1=ht;
            if(max1<ht) max1=ht;
        }
        if(min>max1-min1) min=max1-min1;

        luot++;
    }
    return min;
}