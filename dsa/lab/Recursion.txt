1
void printPattern(int n) 
{ 
    if(n<=0) cout<<n;
    
    else {
        cout<< n<< " ";
        printPattern(n-5);
        cout<< " " << n;
    }
    
}


3
int findMax(int* arr, int length)
{
    /*  
     * STUDENT ANSWER
     */
    if (length==1) {
        return arr[0];
    }
    if (arr[length-1]<arr[0])
        return findMax (arr, length-1);
    else return findMax (arr+1,length-1);
}


4
string dao(string str,int a,int count){
    if (count==a-1) return str;
    string s="";
    if(str[count]!=' '){
        s=dao(str,a,count+1);
    }
    else{
        s=str.substr(0,count);
        s=s+dao(str.substr(count+1,a-1),a-count-1,0);
    }
    return s;
}

bool isPalindrome(string str) 
{ 
    int a=str.length();
    if(a>0) str=dao(str, a, 0);

    if (a<=1) return 1;
    if (str[0]!=str[a-1]) return 0;
    else {
        return isPalindrome(str.substr(1,str.length()-2));
        
    }
}


5
int findGCD(int a, int b)
{
    if (a%b==0) return b;
    else return findGCD(b, a%b);
}


6
void printHailstone(int a)
{
    /*  
     * STUDENT ANSWER
     */
        if (a==1) {
        cout<<a;
        return;}
    cout << a<<" ";
    if (a%2==0) a=a/2;
    else a=a*3+1;
    printHailstone(a);
}


7
int p(int x){
    if(x==1) return 1;
    else return 10*p(x-1);
}
int myArrayToInt(char *str, int n) 
{ 
    /*  
     * STUDENT ANSWER
     */ 
    int x=0;
    if (n==1) return x*10+str[0]-48;
    else {
        x=(str[0]-48)*p(n)+myArrayToInt(str+1, n-1);
    }
     return x;
}